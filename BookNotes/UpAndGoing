=====
p 26
=====

var TAX_RATE = 0.15;
var SPENDING_THESHOLD = 1000;
var PHONE_PRICE = 180;
var ACCESSORY_PRICE = 40;

var bankBalance = prompt('What is your bank balance?');
var numPhones = 0;
var numAccessories=0;
var total = 0;

var calculateTax = function() {
  return PHONE_PRICE * TAX_RATE;
};

var formatPrice = function() {
 return console.log('Total price is: $' + total);
};
var buyPhone = function() {
  total += (PHONE_PRICE + calculateTax());
  numPhones++;
  if(total + ACCESSORY_PRICE*(1+TAX_RATE) <= Math.min(SPENDING_THESHOLD,bankBalance)) {
    total += ACCESSORY_PRICE*(1+TAX_RATE);
    numAccessories++;
  }
};

while(total + PHONE_PRICE + calculateTax()  <= Math.min(SPENDING_THESHOLD,bankBalance)) {
  buyPhone();
}
console.log('Num of phones bought: ' + numPhones);
console.log('Num of accessories bought: ' + numAccessories);
formatPrice();

=============
p34
===
The “how” behind being able to call a.toUpperCase() is more complicated
than just that method existing on the value.
Briefly, there is a String (capital S) object wrapper form, typically
called a “native,” that pairs with the primitive string type; it’s this
object wrapper that defines the toUpperCase() method on its prototype.

When you use a primitive value like "hello world" as an object by
referencing a property or method (e.g., a.toUpperCase() in the previous
snippet), JS automatically “boxes” the value to its object wrapper
counterpart (hidden under the covers).
=================
p 36
=====
Here’s an example of explicit coercion:
var a = "42";
var b = Number( a );
a; // "42"
b; // 42--the number!
And here’s an example of implicit coercion:
var a = "42";
var b = a * 1; // "42" implicitly coerced to 42 here
a; // "42"
b; // 42--the number!
============================
p36 - 37 - 38 - 39
===
when a non-boolean value is coerced to a boolean, does it
become true or false, respectively?
The specific list of “falsy” values in JavaScript is as follows:
• "" (empty string)
• 0, -0, NaN (invalid number)
• null, undefined
• false
Any value that’s not on this “falsy” list is “truthy.”

...

It’s important to remember that a non-boolean value only follows
this “truthy”/“falsy” coercion if it’s actually coerced to a boolean. It’s
not all that difficult to confuse yourself with a situation that seems
like it’s coercing a value to a boolean when it’s not.

...

You should take special note of the == and === comparison rules if
you’re comparing two non-primitive values, like objects (including
function and array). Because those values are actually held by reference,
both == and === comparisons will simply check whether the
references match, not anything about the underlying values.
For example, arrays are by default coerced to strings by simply
joining all the values with commas (,) in between. You might think
that two arrays with the same contents would be == equal, but
they’re not:

var a = [1,2,3];
var b = [1,2,3];
var c = "1,2,3";
a == c; // true
b == c; // true
a == b; // false


(the following is stuff from S.O.)
var a = { a:1,b:2,c:3 }
undefined
var b = { a:1,b:2,c:3 }
undefined
JSON.stringify(a) === JSON.stringify(b)
true
var b = { a:1,b:2,c:4 }
undefined
JSON.stringify(a) === JSON.stringify(b)
false
var b = { a:1,c:3,b:2 }
undefined
JSON.stringify(a) === JSON.stringify(b)
false
=========================================
p44-45
========
Another form of conditional in JavaScript is the “conditional operator,”
often called the “ternary operator.” It’s like a more concise form
of a single if..else statement, such as:

var a = 42;
var b = (a > 41) ? "hello" : "world";
// similar to:
// if (a > 41) {
// b = "hello";
// }
// else {
// b = "world";
// }
If the test expression (a > 41 here) evaluates as true, the first clause
("hello") results; otherwise, the second clause ("world") results,
and whatever the result is then gets assigned to b.
The conditional operator doesn’t have to be used in an assignment,
but that’s definitely the most common usage.
===============================================
p 48
====
There’s another way to execute a function expression, which is typically
referred to as an immediately invoked function expression
(IIFE):
==================
