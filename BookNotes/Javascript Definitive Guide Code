=============
page 49
=======
parseInt("3 blind mice") // => 3
parseFloat(" 3.14 meters") // => 3.14
parseInt("-12.34") // => -12
parseInt("0xFF") // => 255
parseInt("0xff") // => 255
parseInt("-0XFF") // => -255
parseFloat(".1") // => 0.1
parseInt("0.1") // => 0
parseInt(".1") // => NaN: integers can't start with "."
parseFloat("$72.47"); // => NaN: numbers can't start with "$"

parseInt() accepts an optional second argument specifying the radix (base) of the
number to be parsed. Legal values are between 2 and 36.

For example:

parseInt("11", 2); // => 3 (1*2 + 1)
parseInt("ff", 16); // => 255 (15*16 + 15)
parseInt("zz", 36); // => 1295 (35*36 + 35)
parseInt("077", 8); // => 63 (7*8 + 7)
parseInt("077", 10); // => 77 (7*10 + 7)
=================================================
The following code demonstrates the behavior of
+, -, ==, and > with Date objects:

var now = new Date(); // Create a Date object

typeof (now + 1) // => "string": + converts dates to strings
typeof (now - 1) // => "number": - uses object-to-number conversion
now == now.toString() // => true: implicit and explicit string conversions
now > (now -1) // => true: > converts a Date to a number

====================================================
for(var i = 0, j=10; i < 10; i++,j--) console.log(i*j);
======================================================
page 81
==========
Eval - Direct and Indirect
-------------------------

var geval = eval; // Using another name does a global eval
var x = "global", y = "global"; // Two global variables
function f() { // This function does a local eval
var x = "local"; // Define a local variable
eval("x += 'changed';"); // Direct eval sets local variable
return x; // Return changed local variable
}
function g() { // This function does a global eval
var y = "local"; // A local variable
geval("y += 'changed';"); // Indirect eval sets global variable
return y; // Return unchanged local variable
}
console.log(f(), x); // Local variable changed: prints "localchanged global":
console.log(g(), y); // Global variable changed: prints "local globalchanged":

===========================================================================
Using Accessor/Data Properties
------------------------
var createPerson = function(firstName,lastName) {
  var person = {};
  Object.defineProperties(person,{
    firstName: {
      value: firstName
    },
    lastName: {
      value: lastName
    },
    fullName: {
      get: function() {
        return this.firstName + ' ' + this.lastName;
      },
      set: function(value) {
        this.firstName = value.split(' ')[0] || '';
        this.lastName = value.split(' ')[1] || '';
      }
    }

  });
  return person;
}
-------------------------------------------------
var Person = function(firstName,lastName) {
  this.firstName = firstName;
  this.lastName = lastName;

}
Object.defineProperties(Person.prototype,{
  sayHi: {
    value: function() {
      return 'Hi there';
    },
    enumerable: true
  },
  fullName: {
    get: function() {
        return this.firstName + ' ' + this.lastName;
    }
  }
});
var JohnDoe = new Person('John','Doe');
--------------------------------------------------
var Person = function(firstName,lastName) {
  this.lastName = lastName;
  this.sayHi = function() {
    return "Hi there " + firstName; //emulate privacy on Person.firstName
  }
};
Object.defineProperties(Person.prototype,{
  sayHi: {
    value: function() {
      return 'Hi there';
    },
    enumerable: true,
    writable: true
  },
  fullName: {
    get: function() {
        return this.firstName + ' ' + this.lastName;
    }
  }
});
var JohnDoe = new Person('John','Doe');
================================================================
Definitive Guide page 130

Accessor properties Use case
---------------------------
// This object generates strictly increasing serial numbers
  var serialnum = {
  // This data property holds the next serial number.
  // The $ in the property name hints that it is a private property.
  $n: 0,
  // Return the current value and increment it
  get next() { return this.$n++; },
  // Set a new value of n, but only if it is larger than current
  set next(n) {
  if (n >= this.$n) this.$n = n;
  else throw "serial number can only be set to a larger value";
  }
};
==============================================================
page 183 (contd from above example)
=========


The following version of the counter() function is a variation on
code that appeared in §6.6, but it uses closures for private state rather than relying on
a regular object property:

function counter(n) { // Function argument n is the private variable
  return {
    // Property getter method returns and increments private counter var.
    get count() { return n++; },
    // Property setter doesn't allow the value of n to decrease
    set count(m) {
      if (m >= n) n = m;
      else throw Error("count can only be set to a larger value");
    }
  };
}

var c = counter(1000);
c.count // => 1000
c.count // => 1001
c.count = 2000
c.count // => 2000
c.count = 2000 // => Error!

=================================================================
//page 159

// Determine if o is an array-like object.
// Strings and functions have numeric length properties, but are
// excluded by the typeof test. In client-side JavaScript, DOM text
// nodes have a numeric length property, and may need to be excluded
// with an additional o.nodeType != 3 test.

function isArrayLike(o) {
  if (o && // o is not null, undefined, etc.
  typeof o === "object" && // o is an object
  isFinite(o.length) && // o.length is a finite number
  o.length >= 0 && // o.length is non-negative
  o.length===Math.floor(o.length) && // o.length is an integer
  o.length < 4294967296) // o.length < 2^32
    return true; // Then o is array-like
  else
    return false; // Otherwise it is not
}
====================================================
//page 191

function isFunction(x) {
 return Object.prototype.toString.call(x) === "[object Function]";
}
==============================================================


Hoisting test - Definitive page 165
------------------------------------
console.log(sum1) //undefined
//sum1(2,3); //Uncaught TypeError: sum1 is not a function(…)
console.log(sum2); //undefined
console.log(sum3);
sum3(5,8); //13
//sum4(); //if this was run it would throw: Uncaught TypeError: sum4 is not a function
console.log(sum4); //undefined
//sum5(); //Uncaught ReferenceError: sum5 is not defined(…) //(ie - it is not in scope)
//sum5; // Uncaught ReferenceError: sum5 is not defined(…)
sum6(1,2); // Uncaught TypeError: sum6 is not a function
sum7(2,2);// Uncaught ReferenceError: sum7 is not defined(…)


var sum1 = function(a,b) { return a+b; };
var sum2 = (function(a,b) { return a+b; }(3,4));
function sum3(a,b) { return a+b; };
var sum4 = (function sum5(a,b) { return a+b; }(3,4));
var sum6 = function sum7(a,b) { return a+b; };


============================================
var obj = {
  a: 1,
  b: 2,
  f: function() { return this.name; },
  m: function() { return this.a + this.b; }
}
=========================================
page 174
======
// Copy length elements of the array from to the array to.
// Begin copying with element from_start in the from array
// and copy that element to to_start in the to array.
// It is hard to remember the order of the arguments.

function arraycopy(/* array */ from, /* index */ from_start,
/* array */ to, /* index */ to_start,
/* integer */ length)
{
  // code goes here
}

// This version is a little less efficient, but you don't have to
// remember the order of the arguments, and from_start and to_start
// default to 0.

function easycopy(args) {
  arraycopy(args.from,
    args.from_start || 0, // Note default value provided
    args.to,
    args.to_start || 0,
    args.length);
}

// Here is how you might invoke easycopy():

var a = [1,2,3,4], b = [];
easycopy({from: a, to: b, length: 4});
===============================================
page 192
========

//Regular vs Functional Programming

// Regular:
-----------

var data = [1,1,3,5,5]; // This is our array of numbers
// The mean is the sum of the elements divided by the number of elements
var total = 0;
for(var i = 0; i < data.length; i++) total += data[i];
var mean = total/data.length; // The mean of our data is 3
// To compute the standard deviation, we first sum the squares of
// the deviation of each element from the mean.
total = 0;
for(var i = 0; i < data.length; i++) {
  var deviation = data[i] - mean;
  total += deviation * deviation;
}
var stddev = Math.sqrt(total/(data.length-1)); // The standard deviation is 2


We can perform these same computations in concise functional style using the array
methods map() and reduce() like this (see §7.9 to review these methods):

// Functional Programming:
---------------------------
// First, define two simple functions
var sum = function(x,y) { return x+y; };
var square = function(x) { return x*x; };
// Then use those functions with Array methods to compute mean and stddev
var data = [1,1,3,5,5];
var mean = data.reduce(sum)/data.length;
var deviations = data.map(function(x) {return x-mean;});
var stddev = Math.sqrt(deviations.map(square).reduce(sum)/(data.length-1));
==============================================================================
page 209
=======

// Invoke the function f this many times, passing the iteration number
// For example, to print "hello" 3 times:
// var n = 3;
// n.times(function(n) { console.log(n + " hello"); });
Number.prototype.times = function(f, context) {
var n = Number(this);
for(var i = 0; i < n; i++) f.call(context, i);
};
// Define the ES5 String.trim() method if one does not already exist.
// This method returns a string with whitespace removed from the start and end.
String.prototype.trim = String.prototype.trim || function() {
if (!this) return this; // Don't alter the empty string
return this.replace(/^\s+|\s+$/g, ""); // Regular expression magic
};
// Return a function's name. If it has a (nonstandard) name property, use it.
// Otherwise, convert the function to a string and extract the name from that.
// Returns an empty string for unnamed functions like itself.
Function.prototype.getName = function() {
return this.name || this.toString().match(/function\s*([^(]*)\(/)[1];
};

=======================
page 212
----------

Example 9-4. A type() function to determine the type of a value
/**
* Return the type of o as a string:
* -If o is null, return "null", if o is NaN, return "nan".
* -If typeof returns a value other than "object" return that value.
* (Note that some implementations identify regexps as functions.)
* -If the class of o is anything other than "Object", return that.
* -If o has a constructor and that constructor has a name, return it.
* -Otherwise, just return "Object".
**/
function type(o) {
var t, c, n; // type, class, name
// Special case for the null value:
if (o === null) return "null";
// Another special case: NaN is the only value not equal to itself:
if (o !== o) return "nan";
// Use typeof for any value other than "object".
// This identifies any primitive value and also functions.
if ((t = typeof o) !== "object") return t;
// Return the class of the object unless it is "Object".
// This will identify most native objects.
if ((c = classof(o)) !== "Object") return c;
// Return the object's constructor name, if it has one
if (o.constructor && typeof o.constructor === "function" &&
(n = o.constructor.getName())) return n;
// We can't determine a more specific type, so return "Object"
return "Object";
}
// Return the class of an object.
function classof(o) {
return Object.prototype.toString.call(o).slice(8,-1);
};
// Return the name of a function (may be "") or null for nonfunctions
Function.prototype.getName = function() {
if ("name" in this) return this.name;
return this.name = this.toString().match(/function\s*([^(]*)\(/)[1];
};

--------------
